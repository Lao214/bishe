<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mymusic.dao.IMemberApplyDao">

    <resultMap type="com.example.mymusic.entity.MemberApply" id="MemberMap">
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="memberNo" column="member_no" jdbcType="VARCHAR"/>
        <result property="memberName" column="member_name" jdbcType="VARCHAR"/>
        <result property="memberId" column="member_id" jdbcType="BIGINT"/>
        <result property="status" column="status" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>


    <sql id="Base_Column_List">
               id,
               member_no,
               member_name,
               member_id,
               create_time,
               update_time,status
    </sql>

    <!--查询单个-->
    <select id="queryMemberByMemberNo" resultMap="MemberMap">
        select     id,
                   member_no,
                   member_name,
                   member_id,
                   create_time,
                   update_time,status
        from music.member_apply
        where member_no = #{memberNo} and password =#{password}
    </select>


    <!--查询单个-->
    <select id="queryMemberById" resultMap="MemberMap">
        select      id,
                    member_no,
                    member_name,
                    member_id,
                    create_time,
                    update_time,status
        from music.member_apply
        where id = #{id}
    </select>

    <!--查询单个-->
    <select id="login"  parameterType="com.example.mymusic.entity.Member" resultMap="MemberMap">
        select     id,
                   member_no,
                   member_name,
                   member_id,
                   create_time,
                   update_time,status
        from music.member_apply
        where member_no = #{memberNo}  and password =#{password}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="MemberMap">
        select    id,
                  member_no,
                  member_name,
                  member_id,
                  create_time,
                  update_time,status
        from music.member_apply
        limit #{offset}, #{limit}
    </select>

    <!-- 分页查询订单表数量统计 -->
    <select id="queryAllCount"  resultType="java.lang.Long">
        select count(1)
        from music.member_apply
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="MemberMap">
        select
        id,
        member_no,
        member_name,
        member_id,
        create_time,
        update_time,status
        from music.member_apply
        limit #{offset}, #{limit}
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="memberNo != null and memberNo != ''">
                and member_no = #{memberNo}
            </if>
            <if test="memberName != null and memberName != ''">
                and member_name = #{memberName}
            </if>
            <if test="memberId != null and memberId != ''">
                and member_id = #{memberId}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>

        </where>
    </select>

    <!--新增所有列-->
    <insert id="addMember" keyProperty="id" useGeneratedKeys="true">
        insert into music.member_apply(  id,
                                   member_no,
                                   member_name,
                                   member_id,
                                   create_time,
                                   update_time,status)
        values (#{id}, #{memberNo}, #{memberName}, #{memberId},
                now(),now(),#{status})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into music.member_apply(
        id,
        member_no,
        member_name,
        member_id,
        create_time,
        update_time,status)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id}, #{entity.memberNo}, #{entity.memberName}, #{entity.memberLevel}, #{entity.memberType},#{entity.telephone},
            #{entity.password}, #{entity.salt}, #{entity.mobileNo},now(),now(), #{entity.status}, #{entity.headPath})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into music.member_apply(  id,
        member_no,
        member_name,
        member_id,
        create_time,
        update_time,status)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id}, #{entity.memberNo}, #{entity.memberName}, #{entity.memberLevel}, #{entity.memberType},#{entity.telephone},
            #{entity.password}, #{entity.salt}, #{entity.mobileNo},now(),now())
        </foreach>
        on duplicate key update
        id = values(id) , member_no = values(member_no) , member_name = values(member_name) , member_level = values(member_level),
        member_type = values(member_type),telephone = values(telephone) , password = values(password) , salt = values(salt) ,
        mobile_no = values(mobile_no)
    </insert>

    <!--通过主键修改数据-->
    <update id="updateMember">
        update music.member_apply
        <set>
            <if test="id != null">
                 id = #{id},
            </if>
            <if test="memberNo != null and memberNo != ''">
                 member_no = #{memberNo},
            </if>
            <if test="memberName != null and memberName != ''">
                 member_name = #{memberName},
            </if>
            <if test="memberId != null and memberId != ''">
                 member_id = #{memberId},
            </if>
            <if test="createTime != null">
                 create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                 update_time = #{updateTime},
            </if>
            <if test="status != null and status != ''">
                 status = #{status},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteByMemberId">
        delete
        from music.member_apply
        where id = #{id}
    </delete>


    <!-- 删除优惠券表  -->
    <update id="deleteMemberByMemberNo" parameterType="java.lang.String">
        update music.member_apply
        <set>
        status = 'delete',
        update_time =now()
        where member_no = #{memberNo}
        </set>
    </update>


    <!-- 分页查询   查询条件 -->
    <sql id="sqlWhere">
        <where>
            1=1
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="memberNo != null and memberNo != ''">
                and member_no = #{memberNo}
            </if>
            <if test="memberName != null and memberName != ''">
                and member_name = #{memberName}
            </if>
            <if test="memberId != null and memberId != ''">
                and member_id = #{memberId}
            </if>
            <if test="memberId != null and memberId != ''">
                and member_id = #{memberId}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>
        </where>
    </sql>


    <!-- 分页查询出库表数量统计 -->
    <select id="queryMemberCountByCondition" parameterType="com.example.mymusic.entity.param.MemberParam" resultType="java.lang.Long">
        select count(1)
        from music.member_apply
        <include refid="sqlWhere"/>
    </select>


    <!-- 分页查询出库表 -->
    <select id="queryMemberByCondition" parameterType="com.example.mymusic.entity.param.MemberParam" resultMap="MemberMap">
        select <include refid="Base_Column_List"/>
        from music.member_apply
        <include refid="sqlWhere"/>
        order by update_time desc
        limit #{start},#{limit}
    </select>

</mapper>

