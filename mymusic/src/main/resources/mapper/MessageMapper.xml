<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mymusic.dao.IMessageDao">

    <resultMap type="com.example.mymusic.entity.Message" id="MessageMap">
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="memberId" column="member_id" jdbcType="BIGINT"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="details" column="details" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>


    <sql id="Base_Column_List">
               id,
               content,
               details,
               remark,
               create_time,
               status,
               member_id
    </sql>

    <!--查询单个-->
    <select id="queryMessageByMessageNo" resultMap="MessageMap">
        select      id,
                    content,
                    details,
                    remark,
                    create_time,
                    status,
                    member_id
        from music.message
        where message_no = #{messageNo} and password =#{password}
    </select>


    <!--查询单个-->
    <select id="queryMessageById" resultMap="MessageMap">
        select        id,
                      content,
                      details,
                      remark,
                      create_time,
                      status,
                      member_id
        from music.message
        where id = #{id}
    </select>

    <!--查询单个-->
    <select id="login"  parameterType="com.example.mymusic.entity.Message" resultMap="MessageMap">
        select       id,
                     content,
                     details,
                     remark,
                     create_time,
                     status,
                     member_id
        from music.message
        where message_no = #{messageNo}  and password =#{password}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="MessageMap">
        select     id,
                   content,
                   details,
                   remark,
                   create_time,
                   status,
                   member_id
        from music.message
        limit #{offset}, #{limit}
    </select>

    <!-- 分页查询订单表数量统计 -->
    <select id="queryAllCount"  resultType="java.lang.Long">
        select count(1)
        from music.message
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="MessageMap">
        select
        id,
        content,
        details,
        remark,
        create_time,
        status,
        member_id
        from music.message
        limit #{offset}, #{limit}
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="details != null and details != ''">
                and details = #{details}
            </if>
            <if test="remark != null and remark != ''">
                and remark = #{remark}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="memberId != null">
                and member_id = #{memberId}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="addMessage" keyProperty="id" useGeneratedKeys="true">
        insert into music.message(  id,
                                    content,
                                    details,
                                    remark,
                                    create_time,
                                    status,
                                    member_id)
        values (#{id}, #{content}, #{details}, #{remark},
                now(),#{status},#{memberId})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into music.message(
        id,
        content,
        details,
        remark,
        create_time,
        status,
        member_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id}, #{entity.content}, #{entity.details}, #{entity.remark},now(), #{entity.status}, #{entity.memberId})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into music.message(
        id,
        content,
        details,
        remark,
        create_time,
        status,
        member_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id}, #{entity.messageNo}, #{entity.messageName}, #{entity.messageLevel}, #{entity.messageType},#{entity.telephone},
            #{entity.password}, #{entity.salt}, #{entity.mobileNo},now(),now())
        </foreach>
        on duplicate key update
        id = values(id) , message_no = values(message_no) , message_name = values(message_name) , message_level = values(message_level),
        message_type = values(message_type),telephone = values(telephone) , password = values(password) , salt = values(salt) ,
        mobile_no = values(mobile_no)
    </insert>

    <!--通过主键修改数据-->
    <update id="updateMessage">
        update music.message
        <set>
            <if test="id != null">
                 id = #{id},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="details != null and details != ''">
                details = #{details},
            </if>
            <if test="remark != null and remark != ''">
                remark = #{remark},
            </if>
            <if test="createTime != null">
                 create_time = #{createTime},
            </if>
            <if test="memberId != null">
                member_id = #{memberId},
            </if>
            <if test="status != null and status != ''">
                 status = #{status},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteByMessageId">
        delete
        from music.message
        where id = #{id}
    </delete>


    <!-- 删除优惠券表  -->
    <update id="deleteMessageByMessageNo" parameterType="java.lang.String">
        update music.message
        <set>
        status = 'delete',
        update_time =now()
        where message_no = #{messageNo}
        </set>
    </update>


    <!-- 分页查询   查询条件 -->
    <sql id="sqlWhere">
        <where>
            1=1
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="details != null and details != ''">
                and details = #{details}
            </if>
            <if test="remark != null and remark != ''">
                and remark = #{remark}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>
            <if test="memberId != null">
                and member_id = #{memberId}
            </if>
        </where>
    </sql>


    <!-- 分页查询出库表数量统计 -->
    <select id="queryMessageCountByCondition" parameterType="com.example.mymusic.entity.param.MessageParam" resultType="java.lang.Long">
        select count(1)
        from music.message
        <include refid="sqlWhere"/>
    </select>


    <!-- 分页查询出库表 -->
    <select id="queryMessageByCondition" parameterType="com.example.mymusic.entity.param.MessageParam" resultMap="MessageMap">
        select <include refid="Base_Column_List"/>
        from music.message
        <include refid="sqlWhere"/>
        order by id desc
        limit #{start},#{limit}
    </select>

</mapper>

